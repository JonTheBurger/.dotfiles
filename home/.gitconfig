[core]
  editor = vim
[alias]
  a = add
  b = branch
  bD = branch -D
  bd = branch -d
  c = commit --verbose
  co = checkout
  cob = checkout -b
  d = diff
  dc = diff --cached
  ds = diff --stat
  f = fetch --prune
  g = grep
  m = commit --amend --verbose
  s = status -s
  st = status
  w = whatchanged
  # Misspelling
  stauts = status
  # Custom
  subinit = submodule update --init --recursive
  amend = commit --amend --no-edit
  ca = !git add -A && git commit --amend --no-edit
  shove = !git add -A && git commit --amend --no-edit && git push --force
  heave = !git reset --hard origin/$(git rev-parse --abbrev-ref HEAD)
  force-apply = apply --reject --whitespace=fix
  tree = log --graph --decorate --pretty=oneline --abbrev-commit
  nuke = !git reset --hard && git clean -xdff && git restore . --recurse-submodules && git submodule foreach "git nuke"
  aliases = config --get-regexp alias
  ticket = "!f() { branch=$(git rev-parse --abbrev-ref HEAD); echo $branch | grep -oE '[A-Z]+-[0-9]+'; }; f"
  jc = "!f() { branch=$(git rev-parse --abbrev-ref HEAD); ticket=$(echo $branch | grep -oE '[A-Z]+-[0-9]+'); if [ -n \"$ticket\" ]; then git commit -m \"$ticket $*\"; else git commit -m \"$*\"; fi; }; f"
  local-only-branches = !python ~/.local/bin/local-only-branches.py
  gc-branches = !git local-only-branches | xargs git branch -D
  shallow-clone = "!f() { dir=$(echo \"${1}\" | sed 's#.*/\\(.*\\).git#\\1#'); mkdir ${dir}; git -C ${dir} init; git -C ${dir} remote add origin ${1}; git -C ${dir} fetch --depth 1 origin ${2}; git -C ${dir} checkout FETCH_HEAD; }; f ${1} ${2}"

  stashes = stash list
  stash-diff = "!f() { git stash show -p $1; }; f"
  stash-diff-at = "!f() { git stash show -p stash^{/$1}; }; f"
  stash-to = "!f() { git stash push -m $1; }; f"
  unstash-from= "!f() { git stash apply stash^{/$1}; }; f"

  # VERSION
  vlast = "!f() { git describe --tags --abbrev=0 --match *${1}[0-9]*\\\\.[0-9][0-9]\\\\.[0-9][0-9][0-9][0-9]${2}* || echo ${1}0.00.0000${2}; }; f \"${1:+${1:-}-}\" \"${2:+-${2:-}}\""
  vlast-number = "!f() { git vlast \"${1}\" \"${2}\" | grep -o '[0-9][0-9]*\\.[0-9][0-9]\\.[0-9][0-9][0-9][0-9]'; }; f \"${1}\" \"${2}\""
  vlast-prefix = "!f() { git vlast \"${1}\" \"${2}\" | awk -F'[0-9][0-9]*\\\\.[0-9][0-9]\\\\.[0-9][0-9][0-9][0-9]' '{printf($1)}'; }; f \"${1}\" \"${2}\""
  vlast-suffix = "!f() { git vlast \"${1}\" \"${2}\" | awk -F'[0-9][0-9]*\\\\.[0-9][0-9]\\\\.[0-9][0-9][0-9][0-9]' '{printf($2)}'; }; f \"${1}\" \"${2}\""
  vnext-major-number = "!f() { git vlast-number \"${1}\" \"${2}\" | awk -F '.' '{printf(\"%d.%02d.%03d\", $1+1, $2, $3)}';}; f \"${1}\" \"${2}\""
  vnext-major = "!f() { git vlast-prefix \"${1}\" \"${2}\"; git vnext-major-number \"${1}\" \"${2}\"; git vlast-suffix \"${1}\" \"${2}\"; }; f \"${1}\" \"${2}\""
  vnext-minor-number = "!f() { git vlast-number \"${1}\" \"${2}\" | awk -F '.' '{printf(\"%d.%02d.%03d\", $1, $2+1, $3)}';}; f \"${1}\" \"${2}\""
  vnext-minor = "!f() { git vlast-prefix \"${1}\" \"${2}\"; git vnext-minor-number \"${1}\" \"${2}\"; git vlast-suffix \"${1}\" \"${2}\"; }; f \"${1}\" \"${2}\""
  vnext-revision-number = "!f() { git vlast-number \"${1}\" \"${2}\" | awk -F '.' '{printf(\"%d.%02d.%03d\", $1, $2, $3+1)}';}; f \"${1}\" \"${2}\""
  vnext-revision = "!f() { git vlast-prefix \"${1}\" \"${2}\"; git vnext-revision-number \"${1}\" \"${2}\"; git vlast-suffix \"${1}\" \"${2}\"; }; f \"${1}\" \"${2}\""
  vtag-next-major = !git tag $(git vnext-major)
  vtag-next-minor = !git tag $(git vnext-minor)
  vtag-next-revision = !git tag $(git vnext-revision)
  vtag-push = !git push origin $(git vlast-version)

[blame]
  coloring = highlightRecent
  date = short
[format]
  pretty = format:%C(yellow)%h%Creset %Cblue%as%Creset %an %Cgreen%s%Creset
[color "blame"]
  highlightRecent = 237, 20 month ago, 238, 19 month ago, 239, 18 month ago, 240, 17 month ago, 241, 16 month ago, 242, 15 month ago, 243, 14 month ago, 244, 13 month ago, 245, 12 month ago, 246, 11 month ago, 247, 10 month ago, 248, 9 month ago, 249, 8 month ago, 250, 7 month ago, 251, 6 month ago, 252, 5 month ago, 253, 4 month ago, 254, 3 month ago, 231, 2 month ago, 230, 1 month ago, 229, 3 weeks ago, 228, 2 weeks ago, 227, 1 week ago, 226
[filter "lfs"]
  clean = git-lfs clean -- %f
  smudge = git-lfs smudge -- %f
  process = git-lfs filter-process
  required = true
[tig]
  main-view = id date author commit-title
  main-view-author = abbreviated
  main-view-commit-title = graph=yes,refs=yes
  main-view-date = custom
  main-view-date-format = "%Y-%m-%d"
[user]
  name = Jon Povirk
  email = jmp180@pitt.edu
[include] ; includeIf is buggy
  path = .gitconfig-work
[diff]
  algorithm = histogram
[log]
  decorate = full
  pretty = fuller
[pager]
  aliases = false
  branch = false
