; [include]
;   path = /opt/provisioners/style/config/.gitconfig
[core]
  editor = nvim
  pager = delta
[delta]
  navigate = true
[diff]
  colorMove = default
[interactive]
  diffFilter = delta --color-only
[alias]
  ## Aliases
  a = add
  aa = add -A
  b = branch
  br = branch -vva
  bD = branch -D
  bd = branch -d
  c = commit
  ca = commit --amend
  can = commit --amend --no-edit
  ci = commit --verbose
  cl = clone
  cm = commit -m
  co = checkout
  cob = checkout -b
  cp = cherry-pick
  d = diff
  dc = diff --cached
  f = fetch --prune
  g = grep
  ll = log --full-history --stat --color --graph
  pf = push --force-with-lease
  pushf = push --force-with-lease
  s = status -s
  st = status
  sm = submodule
  sma = "!f() { cd -- \"${GIT_PREFIX:-.}\"; git submodule add ${@}; }; f"
  smu = submodule update
  smi = submodule update --init --recursive
  tree = log --graph --decorate --pretty=oneline --abbrev-commit
  w = whatchanged

  # Misspelling
  stauts = status

  ## Stash
  stashes = stash list
  stash-diff = "!f() { git stash show -p $1; }; f"
  stash-to = "!f() { git stash push -m $1; }; f"
  unstash-from= "!f() { git stash apply stash^{/$1}; }; f"

  ## Custom Functions
  A = "!f() { git add -A && git commit --amend --no-edit; }; f"
  aliases = config --get-regexp alias
  addend = !git add -A && commit --amend --no-edit
  amend = commit --amend --no-edit
  authors = shortlog -s -n
  # Reset & clean everything in the main repo and in submodules
  distclean = !git reset --hard && git clean -xdff && git restore . --recurse-submodules && git submodule foreach "git distclean"
  gc-branches = !git local-only-branches | xargs git branch -D
  # Reset branch to state it is on remote
  heave = !git reset --hard origin/$(git rev-parse --abbrev-ref HEAD)
  force-apply = apply --reject --whitespace=fix
  local-only-branches = !python ~/.local/bin/local-only-branches.py
  l = "!f() { lazygit --screen-mode full log; }; f"
  lg = "!f() { lazygit log; }; f"
  lazy = "!f() { lazygit; }; f"
  # pull branch
  pb = "!f() { git fetch origin $1:$1; }; f"
  # git shallow-clone <repo> <ref>
  shallow-clone = "!f() { cd -- \"${GIT_PREFIX:-.}\"; dir=$(echo \"${1}\" | sed 's#.*/\\(.*\\).git#\\1#'); mkdir ${dir}; git -C ${dir} init; git -C ${dir} remote add origin ${1}; git -C ${dir} fetch --depth 1 origin ${2}; git -C ${dir} checkout FETCH_HEAD; }; f ${1} ${2}"
  shove = !git add -A && git commit --amend --no-edit && git push --force-with-lease
  # git squash <ref>
  squash = "!f() { git reset --soft ${1} && git commit --verbose; }; f"
  subinit = submodule update --init --recursive
  # Get Jira ticket associated with branch
  ticket = "!f() { branch=$(git rev-parse --abbrev-ref HEAD); echo $branch | grep -oE '[A-Z]+-[0-9]+'; }; f"
  # Remove last commit, maintain working tree
  uncommit = reset --soft HEAD^
  staash = stash --all
[blame]
  coloring = highlightRecent
  date = short
[format]
  pretty = format:%C(yellow)%h%Creset %Cblue%as%Creset %an %Cgreen%s%Creset
[color "blame"]
  highlightRecent = 237, 20 month ago, 238, 19 month ago, 239, 18 month ago, 240, 17 month ago, 241, 16 month ago, 242, 15 month ago, 243, 14 month ago, 244, 13 month ago, 245, 12 month ago, 246, 11 month ago, 247, 10 month ago, 248, 9 month ago, 249, 8 month ago, 250, 7 month ago, 251, 6 month ago, 252, 5 month ago, 253, 4 month ago, 254, 3 month ago, 231, 2 month ago, 230, 1 month ago, 229, 3 weeks ago, 228, 2 weeks ago, 227, 1 week ago, 226
[filter "lfs"]
  clean = git-lfs clean -- %f
  smudge = git-lfs smudge -- %f
  process = git-lfs filter-process
  required = true
[tig]
  main-view = id date author commit-title
  main-view-author = abbreviated
  main-view-commit-title = graph=yes,refs=yes
  main-view-date = custom
  main-view-date-format = "%Y-%m-%d"
[user]
  name = Jon Povirk
  email = jmp180@pitt.edu
[includeIf "gitdir:~/Projects/"]
  path = ~/Projects/.gitconfig
[diff]
  algorithm = histogram
[pager]
  aliases = false
  branch = false
[color]
  ui = auto
