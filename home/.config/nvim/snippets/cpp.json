{
  "MSA_HEADER_FILE": {
    "prefix": "@file",
    "body": [
      "/** @file",
      " *",
      " *******************************************************************************",
      " * @copyright",
      " * Copyright ${CURRENT_YEAR} MSA as unpublished work. All Rights Reserved.",
      " * The information contained herein is confidential property of MSA. The use,",
      " * copying, transfer or disclosure of such information is prohibited except",
      " * by express written agreement with MSA.",
      " ******************************************************************************/",
      "#ifndef ${1}_HPP",
      "#define ${1}_HPP",
      "#pragma once",
      "",
      "/* Includes",
      " ******************************************************************************/",
      "// std",
      "",
      "// 3rd",
      "",
      "// local",
      "",
      "// namespace",
      "namespace ${2} {",
      "",
      "/* Defines",
      " ******************************************************************************/",
      "",
      "/* Constants",
      " ******************************************************************************/",
      "",
      "/* Type Declarations",
      " ******************************************************************************/",
      "",
      "/* Function Declarations",
      " ******************************************************************************/",
      "",
      "}  // namespace ${2}",
      "#endif /* ${1}_HPP */"
    ]
  },
  "MSA_SOURCE_FILE": {
    "prefix": "@file",
    "body": [
      "/** @file",
      " *",
      " *******************************************************************************",
      " * @copyright",
      " * Copyright ${CURRENT_YEAR} MSA as unpublished work. All Rights Reserved.",
      " * The information contained herein is confidential property of MSA. The use,",
      " * copying, transfer or disclosure of such information is prohibited except",
      " * by express written agreement with MSA.",
      " ******************************************************************************/",
      "",
      "/* Includes",
      " ******************************************************************************/",
      "// std",
      "",
      "// 3rd",
      "",
      "// local",
      "#include <${1}>",
      "",
      "// using",
      "",
      "// namespace",
      "namespace ${2} {",
      "",
      "/* Constants",
      " ******************************************************************************/",
      "",
      "/* Function Definitions",
      " ******************************************************************************/",
      "",
      "}  // namespace ${2}"
    ]
  },
  "MSA_GTEST_FILE": {
    "prefix": "@file",
    "body": [
      "/** @file",
      " *",
      " *******************************************************************************",
      " * @copyright",
      " * Copyright ${CURRENT_YEAR} MSA as unpublished work. All Rights Reserved.",
      " * The information contained herein is confidential property of MSA. The use,",
      " * copying, transfer or disclosure of such information is prohibited except",
      " * by express written agreement with MSA.",
      " ******************************************************************************/",
      "",
      "/* Includes",
      " ******************************************************************************/",
      "// std",
      "",
      "// 3rd",
      "#include <gmock/gmock.h>",
      "#include <gtest/gtest.h>",
      "",
      "// local",
      "/// [Include]",
      "#include <${1}.hpp>",
      "/// [Include]",
      "",
      "// using",
      "using namespace ::testing;",
      "",
      "// namespace",
      "namespace {",
      "/* Test Fixtures",
      " ******************************************************************************/",
      "",
      "/* Test Cases",
      " ******************************************************************************/",
      "/** @test . */",
      "TEST(Test${1}, Example)  // NOLINT",
      "{",
      "/// [Example]",
      "  ${2}",
      "/// [Example]",
      "}",
      "}  // namespace"
    ]
  },
  "TEST_F": {
    "prefix": "TEST_F",
    "body": [
      "TEST_F(${1}, ${2}) // NOLINT",
      "{",
      "  ${3}",
      "}"
    ]
  },
  "operator==": {
    "prefix": "bool op",
    "body": [
      "bool operator==(const ${1}& lhs, const ${1}& rhs) noexcept",
      "{",
      "  ${2}",
      "}"
    ]
  },
  "typedef_struct": {
    "prefix": "typedef",
    "body": [
      "typedef struct ${1} {",
      "  ${2}",
      "} ${1}_t;"
    ]
  }
}
